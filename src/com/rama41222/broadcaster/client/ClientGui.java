/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rama41222.broadcaster.client;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Iterator;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

/**
 * This Class Handles all the GUI components of the SoC Chat client Application
 *
 * @version SoC Chat v1.0
 * @author Rama41222
 */
public class ClientGui extends javax.swing.JFrame implements WritableGUI {

    // Creating a global instance of the Cient Manager Class
    ClientManager clm = new ClientManager();
    private int posX = 0, posY = 0;

    public ClientGui() {
        initComponents();
        sendTxt.setEditable(false);
        privateChatCheck.setEnabled(false);
        privateChatUserList.setVisibleRowCount(-1);

        // Adding an action listener to sendTxt. User presses enter, the message will be sent to the server via client manager instance
        sendTxt.addActionListener(new ActionListener() {

            //Getting the number of items in private chat list box
            int size = privateChatUserList.getModel().getSize();

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!privateChatCheck.isSelected()) {

                    clm.sendMessage(sendTxt.getText());
                    sendTxt.setText("");

                } else if (privateChatCheck.isSelected()) {

                    clm.sendPrivateMessage(generateUserList(), clientNameTxt.getText());
                    clm.sendMessage(sendTxt.getText());
                    sendTxt.setText("");
                }
            }
        });
        // Enabling the mouse drag functionality to the client app draggable panel
        draggablePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                posX = e.getX();
                posY = e.getY();
            }
        });

        draggablePanel.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent evt) {
                setLocation(evt.getXOnScreen() - posX, evt.getYOnScreen() - posY);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        draggablePanel = new javax.swing.JPanel();
        connectBtn = new javax.swing.JButton();
        serverAddressTxt = new javax.swing.JTextField();
        serverPortTxt = new javax.swing.JTextField();
        clientNameTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        privateChatUserList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageBoard = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        sendTxt = new javax.swing.JTextField();
        privateChatCheck = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        onlineUserList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        draggablePanel.setBackground(new java.awt.Color(0, 121, 107));
        draggablePanel.setToolTipText("Drag to move the window");

        connectBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/broadcaster/client/icons/ic_settings_input_antenna_white_36dp_1x.png"))); // NOI18N
        connectBtn.setToolTipText("Connect to the Server");
        connectBtn.setBorderPainted(false);
        connectBtn.setContentAreaFilled(false);
        connectBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        connectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBtnActionPerformed(evt);
            }
        });

        serverAddressTxt.setBackground(new java.awt.Color(0, 121, 107));
        serverAddressTxt.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        serverAddressTxt.setForeground(new java.awt.Color(255, 255, 255));
        serverAddressTxt.setText("localhost");
        serverAddressTxt.setToolTipText("Server Address");
        serverAddressTxt.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0,Color.white));
        serverAddressTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));
        serverAddressTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverAddressTxtActionPerformed(evt);
            }
        });

        serverPortTxt.setBackground(new java.awt.Color(0, 121, 107));
        serverPortTxt.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        serverPortTxt.setForeground(new java.awt.Color(255, 255, 255));
        serverPortTxt.setText("9001");
        serverPortTxt.setToolTipText("Server Port");
        serverPortTxt.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0,Color.white));
        serverPortTxt.setBounds(new java.awt.Rectangle(1, 2, 110, 0));
        serverPortTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));

        clientNameTxt.setBackground(new java.awt.Color(0, 121, 107));
        clientNameTxt.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        clientNameTxt.setForeground(new java.awt.Color(255, 255, 255));
        clientNameTxt.setText("username");
        clientNameTxt.setToolTipText("Username of the Client");
        clientNameTxt.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0,Color.white));
        clientNameTxt.setMargin(new java.awt.Insets(4, 4, 4, 4));
        clientNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientNameTxtActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/broadcaster/client/icons/ic_close_white_36dp_1x.png"))); // NOI18N
        jButton1.setToolTipText("Close the app");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/broadcaster/client/icons/ic_assignment_ind_white_36dp_1x.png"))); // NOI18N
        jButton2.setToolTipText("Show Hide Userlist");
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        clearBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rama41222/broadcaster/client/icons/ic_delete_forever_white_36dp_1x.png"))); // NOI18N
        clearBtn.setToolTipText("Clear the Message board");
        clearBtn.setBorderPainted(false);
        clearBtn.setContentAreaFilled(false);
        clearBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout draggablePanelLayout = new javax.swing.GroupLayout(draggablePanel);
        draggablePanel.setLayout(draggablePanelLayout);
        draggablePanelLayout.setHorizontalGroup(
            draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(draggablePanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(clientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(serverAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(serverPortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        draggablePanelLayout.setVerticalGroup(
            draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(draggablePanelLayout.createSequentialGroup()
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(draggablePanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(clearBtn)
                                .addComponent(connectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, draggablePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(draggablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverPortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        privateChatUserList.setBackground(new java.awt.Color(0, 121, 107));
        privateChatUserList.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        privateChatUserList.setForeground(new java.awt.Color(255, 255, 255));
        privateChatUserList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        privateChatUserList.setOpaque(false);
        privateChatUserList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                privateChatUserListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(privateChatUserList);

        messageBoard.setEditable(false);
        messageBoard.setColumns(20);
        messageBoard.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        messageBoard.setRows(5);
        messageBoard.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                messageBoardPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(messageBoard);

        jPanel3.setBackground(new java.awt.Color(0, 121, 107));

        sendTxt.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        sendTxt.setToolTipText("");
        sendTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendTxtActionPerformed(evt);
            }
        });

        privateChatCheck.setForeground(new java.awt.Color(255, 255, 255));
        privateChatCheck.setText("Turn on Private Mode");
        privateChatCheck.setToolTipText("Turn on to the private chat mode");
        privateChatCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                privateChatCheckStateChanged(evt);
            }
        });
        privateChatCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                privateChatCheckMouseClicked(evt);
            }
        });
        privateChatCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateChatCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sendTxt)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(privateChatCheck)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(privateChatCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        onlineUserList.setBackground(new java.awt.Color(0, 121, 107));
        onlineUserList.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        onlineUserList.setForeground(new java.awt.Color(255, 255, 255));
        onlineUserList.setToolTipText("Online UserList");
        onlineUserList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onlineUserListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(onlineUserList);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(draggablePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(draggablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void connectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtnActionPerformed

        //Setting up the client details of the empty Client manager instantiated above
        clm.setClientDetails(this, serverAddressTxt.getText(), Integer.parseInt(serverPortTxt.getText()), clientNameTxt.getText());

        /*Creates a new thread and starts the @connectionEstablish() function of client manager instance
         * Thread was created otherwise the thread which runs the gui will freeze until connectionEstablish() is executed fully
         */
        Thread task = new Thread() {
            @Override
            public void run() {
                clm.connectionEstablish();
            }
        };
        task.start();

    }//GEN-LAST:event_connectBtnActionPerformed

    private void sendTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendTxtActionPerformed

    private void messageBoardPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_messageBoardPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_messageBoardPropertyChange

    private void clientNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientNameTxtActionPerformed

    private void onlineUserListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onlineUserListMouseClicked

        //Selects a user/multiple users and adds to the private chat horizontal list box  
        DefaultListModel privateChatListModel = new DefaultListModel();
        privateChatUserList.setModel(privateChatListModel);
        onlineUserList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        onlineUserList.getSelectedValuesList().stream().filter((sel) -> (!privateChatListModel.contains(sel))).map((sel) -> {
            privateChatListModel.addElement(sel);
            return sel;
        }).forEach((_item) -> {
            privateChatCheck.setEnabled(true);
        });
    }//GEN-LAST:event_onlineUserListMouseClicked

    private void privateChatUserListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privateChatUserListMouseClicked
       
        //Removes a selected user from private chat list box
        DefaultListModel privateChatListModel = (DefaultListModel) privateChatUserList.getModel();
        privateChatListModel.remove(privateChatUserList.getSelectedIndex());

        if (privateChatUserList.getModel().getSize() <= 0) {
            privateChatCheck.setEnabled(false);
        }


    }//GEN-LAST:event_privateChatUserListMouseClicked

    private void privateChatCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateChatCheckActionPerformed
        //sends a 'bye' signal to the server when private chat is unchecked to disable private chat functionality
        if (!privateChatCheck.isSelected()) {
            clm.sendPrivateMessage(generateUserList(), clientNameTxt.getText());
            clm.sendMessage("bye");
            DefaultListModel listModel = (DefaultListModel) privateChatUserList.getModel();
            listModel.removeAllElements();
        }
    }//GEN-LAST:event_privateChatCheckActionPerformed

    private void privateChatCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_privateChatCheckStateChanged

    }//GEN-LAST:event_privateChatCheckStateChanged

    private void privateChatCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privateChatCheckMouseClicked

    }//GEN-LAST:event_privateChatCheckMouseClicked

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        messageBoard.setText("");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new AboutMe().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void serverAddressTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverAddressTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverAddressTxtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        ClientGui clientGui = new ClientGui();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                clientGui.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField clientNameTxt;
    private javax.swing.JButton connectBtn;
    private javax.swing.JPanel draggablePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea messageBoard;
    private javax.swing.JList<String> onlineUserList;
    private javax.swing.JCheckBox privateChatCheck;
    private javax.swing.JList<String> privateChatUserList;
    private javax.swing.JTextField sendTxt;
    private javax.swing.JTextField serverAddressTxt;
    private javax.swing.JTextField serverPortTxt;
    // End of variables declaration//GEN-END:variables

    //Set of usernames are taken from the private chat list box and generates a string seperated by ','
    private String generateUserList() {
        int listSize = privateChatUserList.getModel().getSize();
        String userList = "";
        for (int i = 0; i < listSize; i++) {
            userList = userList + privateChatUserList.getModel().getElementAt(i) + ",";
        }
        return userList;
    }

    //Overring the functions of WritableGUI interface which is used to update the gui from Client Manager Instance
    @Override
    public void write(String s) {
        messageBoard.append(s + "\n");
    }

    @Override
    public void enableText(boolean b) {
        sendTxt.setEditable(b);
    }

    @Override
    public void setOnlineUsers(String[] arr) {
        DefaultListModel onlineUserListModel = new DefaultListModel();
        for (String user : arr) {
            onlineUserListModel.addElement(user);
        }
        onlineUserList.setModel(onlineUserListModel);
    }

    @Override
    public void clearList(boolean b) {
        DefaultListModel listModel = (DefaultListModel) privateChatUserList.getModel();
        listModel.removeAllElements();

    }

    @Override
    public void resetCheckState(boolean b) {
        privateChatCheck.setSelected(b);
    }

    @Override
    public void disableConnect(boolean b) {
        connectBtn.setEnabled(b);
    }

}
